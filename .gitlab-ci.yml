###
# Gitlab CI
#
# @author Mike Street
# @date 01-2021
#
# Utilises the custom Liquid Light linter
# https://gitlab.lldev.co.uk/devops/lint
#
###

# Stages which are run
stages:
  - backend
  - build
  - build-slim

# Use custom LL docker image
# image: registry.gitlab.lldev.co.uk/devops/containers/buster-node-ci

# # Lint the PHP
# php:stan:
#   stage: backend
#   script:
#     - composer install --no-ansi --no-dev --no-interaction --no-scripts --no-progress --optimize-autoloader
#     - lint php:stan --level=8

# php:coding-standards:
#   stage: backend
#   script:
#     - lint php:coding-standards

# composer:normalize:
#   stage: backend
#   script:
#     - lint composer:normalize

###
# Base Image Build
###

.image:build:
  stage: build
  image: docker:20.10.24
  variables:
    COMPOSER_VERSION: "2"
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_BUILDKIT: 1
  services:
    - docker:20.10.24-dind
  before_script:
    # Login to our registry
    - echo "$DOCKER_REGISTRY_PASS" | docker login $DOCKER_REGISTRY --username $DOCKER_REGISTRY_USER --password-stdin
  script:
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE/${TITLE}:dev-main
      --build-arg APP_PATH="${APP_PATH}"
      -f ./Dockerfiles/${DOCKER_IMAGE}
      .
    - docker push $CI_REGISTRY_IMAGE/${TITLE}:dev-main
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual

# .slim:image:build:
#   extends:
#     - .image:build
#   stage: build-slim
#   image:
#     name: dslim/slim
#     entrypoint: [""]
#   script:
#     - docker pull $CI_REGISTRY_IMAGE/${TITLE}:dev-main
#     - >
#       /bin/docker-slim
#       --include-path /node_modules
#       --include-path /config
#       --include-path /lint
#       --http-probe false
#       --continue-after 1
#       --target $CI_REGISTRY_IMAGE/${TITLE}:dev-main
#       --tag $CI_REGISTRY_IMAGE/${TITLE}-slim:dev-main
#     - docker push $CI_REGISTRY_IMAGE/${TITLE}-slim:dev-main

###
# Base Image Builds
###
.npm:image:build:
  extends:
    - .image:build
  variables:
    DOCKER_IMAGE: "NPM.dockerfile"

.composer:image:build:
  extends:
    - .image:build
  variables:
    DOCKER_IMAGE: "Composer.dockerfile"

.curl:image:build:
  extends:
    - .image:build
  variables:
    DOCKER_IMAGE: "cURL.dockerfile"

###
# NPM Images
###

js-eslint:image:build:
  extends:
    - .npm:image:build
  variables:
    TITLE: "js-eslint"
    APP_PATH: "/app/eslint"

# js-eslint-slim:image:build:
#   extends:
#     - .slim:image:build
#   needs:
#     - js-eslint:image:build
#   variables:
#     TITLE: "js-eslint"

scss-stylelint:image:build:
  extends:
    - .npm:image:build
  variables:
    TITLE: "scss-stylelint"
    APP_PATH: "/app/stylelint"

###
# Composer Images
###

editorconfig:image:build:
  extends:
    - .composer:image:build
  variables:
    TITLE: "editorconfig"
    APP_PATH: "/app/editorconfig"

php-coding-standards:image:build:
  extends:
    - .composer:image:build
  variables:
    TITLE: "php-coding-standards"
    APP_PATH: "/app/php-coding-standards"

###
# cURL Images
###

composer-normalize:image:build:
  extends:
    - .curl:image:build
  variables:
    TITLE: "composer-normalize"
    APP_PATH: "/app/composer-normalize"
