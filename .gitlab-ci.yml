###
# Gitlab CI
#
# @author Mike Street
# @date 01-2021
#
# Utilises the custom Liquid Light linter
# https://gitlab.lldev.co.uk/devops/lint
#
###

# Stages which are run
stages:
  - backend
  - build
  - build-slim

variables:
  ADDITIONAL_COMMANDS: ""

cache:
  - key:
      files:
        - composer.lock
    paths:
      - vendor/
      - app/**/vendor/
  - key:
      files:
        - package-lock.json
    paths:
      - node_modules/
      - app/**/node_modules/

# Use custom LL docker image
# image: registry.gitlab.lldev.co.uk/devops/containers/buster-node-ci

# # Lint the PHP
# php:stan:
#   stage: backend
#   script:
#     - composer install --no-ansi --no-dev --no-interaction --no-scripts --no-progress --optimize-autoloader
#     - lint php:stan --level=8

# php:coding-standards:
#   stage: backend
#   script:
#     - lint php:coding-standards

# composer:normalize:
#   stage: backend
#   script:
#     - lint composer:normalize

###
# Base Image Build
###

.image:build:
  stage: build
  image: registry.gitlab.lldev.co.uk/devops/containers/deployment/docker:php8.2
  before_script:
    # Login to our registry
    - echo "$DOCKER_REGISTRY_PASS" | docker login $DOCKER_REGISTRY --username $DOCKER_REGISTRY_USER --password-stdin
  script:
    - cd ${APP_PATH}
    - composer install --no-dev --no-interaction --no-scripts --no-progress --optimize-autoloader --ansi  --ignore-platform-reqs
    - $ADDITIONAL_COMMANDS
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE/${TITLE}:dev-main
      -f ./../../Dockerfiles/Linter.dockerfile
      .
    - docker push $CI_REGISTRY_IMAGE/${TITLE}:dev-main
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual

.slim:image:build:
  stage: build-slim
  image: docker:latest
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    # Login to our registry
    - echo "$DOCKER_REGISTRY_PASS" | docker login $DOCKER_REGISTRY --username $DOCKER_REGISTRY_USER --password-stdin
  script:
    # Make the docker-slim tool available to the CI job
    - >
      apk add -u curl
      && curl -L -o ds.tar.gz https://downloads.dockerslim.com/releases/1.37.3/dist_linux.tar.gz
      && tar -xvf ds.tar.gz
      && mv dist_linux/docker-slim /usr/local/bin/
      && mv dist_linux/docker-slim-sensor /usr/local/bin/
    # Ensure that the fat image is cached locally
    - docker pull $CI_REGISTRY_IMAGE/${TITLE}:dev-main
    # Note regarding parameters: "--target" is the input, "--tag" is the output
    - >
      docker-slim
      --target $CI_REGISTRY_IMAGE/${TITLE}:dev-main
      --include-path="/lint"
      --http-probe="false"
      --continue-after="1"
      --tag $CI_REGISTRY_IMAGE/${TITLE}-slim:dev-main
    - docker push $CI_REGISTRY_IMAGE/${TITLE}-slim:dev-main
  artifacts:
    expire_in: 7 days
    paths:
      - slim.report.json

###
# Linting Images
###

composer:normalize:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "composer-normalize"
    APP_PATH: "./app/composer-normalize"

composer:normalize:slim:image:build:
  extends:
    - .slim:image:build
  needs:
    - composer:normalize:image:build
  variables:
    TITLE: "composer-normalize"

editorconfig:lint:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "editorconfig"
    APP_PATH: "./app/editorconfig"

js:eslint:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "js-eslint"
    APP_PATH: "./app/eslint"
    ADDITIONAL_COMMANDS: "npm install --no-save --audit=false"

json:lint:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "json-lint"
    APP_PATH: "./app/json-lint"

php:coding-standards:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "php-coding-standards"
    APP_PATH: "./app/php-coding-standards"

php:rector:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "rector"
    APP_PATH: "./app/rector"

php:stan:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "phpstan"
    APP_PATH: "./app/phpstan"

scss:stylelint:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "stylelint"
    APP_PATH: "./app/stylelint"
    ADDITIONAL_COMMANDS: "npm install --no-save --audit=false"

typoscript:lint:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "typoscript-lint"
    APP_PATH: "./app/typoscript-lint"

yaml:lint:image:build:
  extends:
    - .image:build
  variables:
    TITLE: "yaml-lint"
    APP_PATH: "./app/yaml-lint"
